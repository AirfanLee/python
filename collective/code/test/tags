!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
C	apriori.py	/^C = []$/;"	v
C	fp_growth.py	/^C=[]$/;"	v
FP_grouth	fp_growth.py	/^def FP_grouth( fp_tree , item ):$/;"	f
FP_make_tree	fp_growth.py	/^def FP_make_tree( D ):$/;"	f
FP_tree	fp_growth.py	/^FP_tree = FP_make_tree( data )$/;"	v
L	apriori.py	/^L={}$/;"	v
L	fp_growth.py	/^L={}$/;"	v
Node	fp_growth.py	/^class Node(object):$/;"	c
__init__	fp_growth.py	/^    def __init__( self, data = None, sup = 1 ,child = None ):$/;"	m	class:Node
apcount	clusters.py	/^apcount={}$/;"	v
apriori_gen	apriori.py	/^def apriori_gen( L ):$/;"	f
calculateSimilarItems	make_data.py	/^def calculateSimilarItems(prefs,n=10):$/;"	f
calculateSimilarItems	recommendations.py	/^def calculateSimilarItems(prefs,n=10):$/;"	f
calculateSimilarUsers	make_data.py	/^def calculateSimilarUsers(prefs,n=10):$/;"	f
compare	fp_growth.py	/^def compare(x,y):$/;"	f
critics	make_data.py	/^critics={$/;"	v
critics	recommendations.py	/^critics={'Lisa Rose': {'Lady in the Water': 2.5, 'Snakes on a Plane': 3.5,$/;"	v
data	apriori.py	/^data={$/;"	v
data	fp_growth.py	/^data={$/;"	v
feedlist	clusters.py	/^feedlist=[line for line in file('data\/list.txt')]$/;"	v
find_frequent_1_itemsets	apriori.py	/^def find_frequent_1_itemsets( D ):$/;"	f
find_frequent_1_itemsets	fp_growth.py	/^def find_frequent_1_itemsets( D ):$/;"	f
getRecommendations	make_data.py	/^def getRecommendations(prefs,person,similarity=sim_pearson):$/;"	f
getRecommendations	recommendations.py	/^def getRecommendations(prefs,person,similarity=sim_pearson):$/;"	f
getRecommendedItems	make_data.py	/^def getRecommendedItems(prefs,itemMatch,user):$/;"	f
getRecommendedItems	recommendations.py	/^def getRecommendedItems(prefs,itemMatch,user):$/;"	f
getWordCounts	clusters.py	/^def getWordCounts( url ):$/;"	f
getWords	clusters.py	/^def getWords( html ):$/;"	f
get_sup	apriori.py	/^def get_sup( c ):$/;"	f
has_infrequent_subset	apriori.py	/^def has_infrequent_subset( c ):$/;"	f
loadMovieLens	make_data.py	/^def loadMovieLens(path='data'):$/;"	f
loadMovieLens	recommendations.py	/^def loadMovieLens(path='\/data\/movielens'):$/;"	f
make_data	make_data.py	/^def make_data():$/;"	f
min_sup	apriori.py	/^min_sup = 2$/;"	v
min_sup	fp_growth.py	/^min_sup = 2$/;"	v
res	apriori.py	/^res = apriori_gen( L[1] )$/;"	v
res	apriori.py	/^res = apriori_gen( L[2] )$/;"	v
res	apriori.py	/^res = apriori_gen( L[3] )$/;"	v
res	make_data.py	/^res = calculateSimilarUsers(critics)$/;"	v
sim_distance	make_data.py	/^def sim_distance( prefs,person1,person2 ):$/;"	f
sim_distance	recommendations.py	/^def sim_distance(prefs,person1,person2):$/;"	f
sim_pearson	make_data.py	/^def sim_pearson(prefs,p1,p2):$/;"	f
sim_pearson	recommendations.py	/^def sim_pearson(prefs,p1,p2):$/;"	f
sort_sup	fp_growth.py	/^def sort_sup( item ):$/;"	f
topMatches	make_data.py	/^def topMatches(prefs,person,n=5,similarity=sim_distance):$/;"	f
topMatches	recommendations.py	/^def topMatches(prefs,person,n=5,similarity=sim_pearson):$/;"	f
transformPrefs	make_data.py	/^def transformPrefs(prefs):$/;"	f
transformPrefs	recommendations.py	/^def transformPrefs(prefs):$/;"	f
wordcounts	clusters.py	/^wordcounts={}$/;"	v
wordlist	clusters.py	/^wordlist=[]$/;"	v
